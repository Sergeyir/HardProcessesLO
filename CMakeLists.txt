cmake_minimum_required(VERSION 3.0...4.0 FATAL_ERROR)

project(PairAnalysisPhenix)

option(BUILD_SHARED_LIBS "Build using shared libraries" ON)

set(CMAKE_CXX_FLAGS "-Wall -Werror -Wpedantic -pipe -O2 -g")
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED True)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)

find_package(ROOT QUIET)

if(${ROOT_FOUND})
   message(STATUS "ROOT package found")
   link_libraries(${ROOT_LIBRARIES})
elseif(EXISTS "$ENV{ROOT_PATH}/bin/root-config")
   message(STATUS "ROOT path found")
   set(ROOT_INCLUDE_DIRS "$ENV{ROOT_PATH}/include")
   set(ROOT_root_CMD "$ENV{ROOT_PATH}/bin/root-config")
   execute_process(COMMAND ${ROOT_root_CMD} --glibs OUTPUT_VARIABLE ROOT_LIB_FLAGS)
   string(STRIP ${ROOT_LIB_FLAGS} ROOT_LIB_FLAGS)
else()
   message(FATAL_ERROR "ROOT was not found: install it via package manager or set ROOT_PATH if you installed it manually")
endif()

if (EXISTS "$ENV{PYTHIA8_PATH}/bin/pythia8-config")
   message(STATUS "PYTHIA8 path found")
   set(PYTHIA_INCLUDE_DIRS "$ENV{PYTHIA8_PATH}/include")
   set(PYTHIA_CMD "$ENV{PYTHIA8_PATH}/bin/pythia8-config")
   execute_process(COMMAND ${PYTHIA_CMD} --libs OUTPUT_VARIABLE PYTHIA_LIB_FLAGS)
   string(STRIP ${PYTHIA_LIB_FLAGS} PYTHIA_LIB_FLAGS)
else()
   message(FATAL_ERROR "PYTHIA8 not found: install it manually and set PYTHIA8_PATH")
endif()

if (EXISTS "$ENV{LHAPDF6_PATH}/bin/lhapdf-config")
   message(STATUS "LHAPDF6 path found")
   set(LHAPDF_INCLUDE_DIRS "$ENV{LHAPDF6_PATH}/include")
   set(LHAPDF_CMD "$ENV{LHAPDF6_PATH}/bin/lhapdf-config")
   execute_process(COMMAND ${LHAPDF_CMD} --libs OUTPUT_VARIABLE LHAPDF_LIB_FLAGS)
   string(STRIP ${LHAPDF_LIB_FLAGS} LHAPDF_LIB_FLAGS)
else()
   message(FATAL_ERROR "LHAPDF6 not found: install it manually and set LHAPDF6_PATH")
endif()

if (EXISTS "$ENV{FASTJET3_PATH}/bin/fastjet-config")
   message(STATUS "FASTJET3 path found")
   set(FASTJET_INCLUDE_DIRS "$ENV{FASTJET3_PATH}/include")
   set(FASTJET_CMD "$ENV{FASTJET3_PATH}/bin/fastjet-config")
   execute_process(COMMAND ${FASTJET_CMD} --libs --rpath OUTPUT_VARIABLE FASTJET_LIB_FLAGS)
   string(STRIP ${FASTJET_LIB_FLAGS} FASTJET_LIB_FLAGS)
else()
   message(FATAL_ERROR "FASTJET3 not found: install it manually and set FASTJET3_PATH")
endif()

set(CMAKE_SHARED_LINKER_FLAGS "${ROOT_LIB_FLAGS} ${PYTHIA_LIB_FLAGS} ${LHAPDF_LIB_FLAGS} ${FASTJET_LIB_FLAGS}")
set(CMAKE_EXE_LINKER_FLAGS "${ROOT_LIB_FLAGS} ${PYTHIA_LIB_FLAGS} ${LHAPDF_LIB_FLAGS} ${FASTJET_LIB_FLAGS}")

include_directories(${CMAKE_SOURCE_DIR}/include ${ROOT_INCLUDE_DIRS} ${PYTHIA_INCLUDE_DIRS} ${LHAPDF_INCLUDE_DIRS} ${FASTJET_INCLUDE_DIRS})

add_subdirectory(yaml-cpp EXCLUDE_FROM_ALL)

link_libraries(yaml-cpp)

add_executable(GenerateData ${CMAKE_SOURCE_DIR}/src/GenerateData.cpp)

if (CMAKE_VERSION LESS 4.0)
   string(STRIP ${CMAKE_SHARED_LINKER_FLAGS} CMAKE_EXE_LINKER_FLAGS)
   string(STRIP ${CMAKE_EXE_LINKER_FLAGS} CMAKE_EXE_LINKER_FLAGS)
   target_link_libraries(GenerateData PRIVATE ${CMAKE_EXE_LINKER_FLAGS})
endif()
